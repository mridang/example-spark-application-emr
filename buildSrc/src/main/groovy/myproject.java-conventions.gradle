plugins {
    id 'java'
    id 'checkstyle'
    id 'scalaStyle'
    id 'scala'
    id "com.github.spotbugs"
    id 'maven-publish'
    id 'java-library'
    id 'com.diffplug.spotless'
    id 'net.ltgt.errorprone'
    id 'net.ltgt.nullaway'
    id "com.dorongold.task-tree"
    id "jacoco"
    id "application"
    id 'com.github.johnrengelman.shadow'
}

dependencies {
    errorprone group: 'com.uber.nullaway', name: 'nullaway', version: '0.9.1'
    errorprone (group: 'com.google.errorprone', name: 'error_prone_core', version: '2.7.1') {
        exclude group: 'org.checkerframework', module: "dataflow-shaded"
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://maven.onehippo.com/maven2/'
    }
}

// Configuration for the nullaway extension. The rest of the parameters must be
// specified on the java-compile tasks. The only option that be specified here
// is the name of the root package to be analysed.
nullaway {
    //noinspection GrUnresolvedAccess
    annotatedPackages.add("com.mridang")
}

// Configuration for the Scalastyle plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
scalaStyle {
    configLocation "project/scalastyle_config.xml"
}

// Configuration for the Jacoco plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
jacoco {
    toolVersion = "0.8.5"
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
jacocoTestReport {
    reports {
        csv.enabled = true
        xml.enabled = false
        html.enabled = true
    }
}

test {
    testLogging {
        events "PASSED", "SKIPPED", "FAILED"
    }
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

javadoc {
    options.addBooleanOption('html5', true)
}

scaladoc {
    scalaDocOptions.additionalParameters = ['-no-link-warnings']
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    archiveClassifier.set("javadoc")
    from scaladoc.destinationDir
}

java {
    withSourcesJar()
    withJavadocJar()
}

// Configuration for the Spotbugs plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
spotbugs {
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    toolVersion = '4.0.2'
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    ignoreFailures = true
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    effort = 'max'
    // Exclude all *.scala files as Spotbugs doesn't work too well with Scala.
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    excludeFilter = file("$rootDir/gradle/config/spotbugs/exclude.xml")
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
spotbugsMain {
    //noinspection GroovyAssignabilityCheck
    reports {
        xml.enabled = true
    }
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
spotbugsTest {
    //noinspection GroovyAssignabilityCheck
    reports {
        xml.enabled = true
    }
}

// Configuration for the Checkstyle plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
checkstyle {
    toolVersion "7.6.1"
    config rootProject.resources.text.fromFile("gradle/config/checkstyle/checkstyle.xml")
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed
// and must be explicitly disabled
checkstyleMain {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
checkstyleTest {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

// Task for building the zip file for upload
task buildZip(type: Zip) {
    zip64 = true
    archiveBaseName.set(rootProject.name)
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

shadowJar {
    zip64 true
    dependencies {
        exclude({
            var boolean skip = project.project(":emr").configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts
                    .findAll {
                        artifact -> artifact.owner.id.group == it.moduleGroup
                    }.findAll {
                artifact -> artifact.owner.id.name == it.moduleName
            }
                    .findAll {
                        artifact -> artifact.owner.version == it.moduleVersion
                    }
                    .any()
            if (!skip) {
                logger.debug(it.moduleGroup + ":" + it.moduleName + ":" + it.moduleVersion)
            }
            skip
        })
    }
}

//noinspection GroovyAssignabilityCheck
build {
    dependsOn buildZip
    //dependsOn shadowJar
}

afterEvaluate {
    configurations.all {
        if (name.startsWith("incrementalScalaAnalysis")) {
            extendsFrom = []
        }
    }
}